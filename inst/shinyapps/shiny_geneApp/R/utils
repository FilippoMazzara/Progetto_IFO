### TOOLTIPS
lo span cambia la posizione
<span data-toggle="tooltip" style="float:right" data-placement="right" title="" data-original-title="A tooltip">
  <i class="far fa-circle-question" role="presentation" aria-label="circle-question icon"></i>
</span>
altro modo
span(
  style="float:right;margin-right:5%;margin-top:2%;",
  `data-toggle` = "tooltip", `data-placement` = "left",
  title = "A tooltip",
  icon("question-circle")
)
###helptext panel
help_text_panel <- tagList(
  wellPanel(
    HTML("<label>Text menu: <i id='help_text_all' title='Check all' href='#' class='action-button glyphicon glyphicon-ok'></i>
    <i id='help_text_none' title='Uncheck all' href='#' class='action-button glyphicon glyphicon-remove'></i></label>"),
    checkboxGroupInput("help_text", NULL, help_text,
                       selected = state_group("help_text"), inline = TRUE)
  )
)

#shinyjs::onclick(id= "toggle_well_input", { #aggiungi visibility
   # shinyjs::runjs('var z = document.getElementById("well_input");
    #                if (z.style.height == "0px") {z.style.height="100px";} else {z.style.height="0px";}
     #               ')})



#d <- data.table::fread(input$fromfile$datapath, data.table=F)
        #save(d,file = paste(input$fromfile$name,".RData",sep=""))
        f <- get(load("maf_test.tsv.RData"))
        data.table::setDT(f)

data <- shiny::eventReactive({
        shiny::req(shiny::isTruthy(input$fromfile) || shiny::isTruthy(input$dataset_files), cancelOutput = TRUE)
        if (shiny::isTruthy(input$fromfile))
          {data.table::fread(shiny::isolate(input$fromfile$datapath), data.table=T)}
        else if (shiny::isTruthy(input$dataset_files)) {
          shinyFiles::shinyFileChoose(input = input, id = "dataset_files", session = session, roots=c(wd = "C:/Users/facke/Desktop/datasets"), defaultPath="/")
          inFile <- shinyFiles::parseFilePaths(roots=c(wd="C:/Users/facke/Desktop/datasets"),shiny::isolate( input$dataset_files))
          if (length(inFile$datapath) != 0 ){
          data.table::fread(as.character(inFile$datapath), data.table=T)}}
      })
datax <- shiny::reactive({
        shiny::req(shiny::isTruthy(input$fromfile) || shiny::isTruthy(input$dataset_files))
        print(input$fromfile)
        print(input$dataset_files)
        if (shiny::isTruthy(input$fromfile))
        {data.table::fread(input$fromfile$datapath, data.table=T)}
        else if (shiny::isTruthy(input$dataset_files)) {
          shinyFiles::shinyFileChoose(input = input, id = "dataset_files", session = session, roots=c(wd = "C:/Users/facke/Desktop/datasets"), defaultPath="/")
          inFile <- shinyFiles::parseFilePaths(roots=c(wd="C:/Users/facke/Desktop/datasets"), input$dataset_files)
          if (length(inFile$datapath) != 0 ){
            data.table::fread(as.character(inFile$datapath), data.table=T)}}
      })



-------------------------------------

li <- shiny::reactiveVal(list())
      data2 <- shiny::reactiveValues(tables = list())
      #data2[["l"]] <- li
      shiny::observeEvent(input$fromfile,{
        #shiny::req(input$fromfile)
        #current1(input$fromfile$name)
        d <- data.table::fread(input$fromfile$datapath, data.table=T)
        data2$tables <- c(data2$tables,list(d))
        #print(is.null(data2[[input$fromfile$name]]))
        #if (is.null(data2[[input$fromfile$name]])){
         # data2[[input$fromfile$name]] <- shiny::reactiveVal(data.table::fread(input$fromfile$datapath, data.table=T))
        #}
        #else {data2[[input$fromfile$name]]()}

         # i <- data2[["l"]]()
       # i[[input$fromfile$name]] <- data.table::fread(input$fromfile$datapath, data.table=T)
       # data2[["l"]](i)
        # i <- li()
        # print(!(input$fromfile$name %in% names(i)))
        # if (!(input$fromfile$name %in% names(i))){
        #  i[[input$fromfile$name]] <- data.table::fread(input$fromfile$datapath, data.table=T)
        #  li(i)}

        }
        )
shiny::observeEvent(input$dataset_files,{
        #shiny::req()
        inFile <- shinyFiles::parseFilePaths(roots=c(wd="C:/Users/facke/Desktop/datasets"), input$dataset_files)
        if (length(inFile$datapath) != 0 ){
        d <- data.table::fread(as.character(inFile$datapath), data.table=T)
        data2$tables <- c(data2$tables,list(d))
        }})

          #current1(inFile$name)
          #titolo11(inFile$name)
          #titolo12(inFile$name)
          #if (is.null(data2[[inFile$name]])){
          #  data2[[inFile$name]] <- shiny::reactiveVal(data.table::fread(as.character(inFile$datapath), data.table=T))
          }
          #else {data2[[inFile$name]](data.table::fread(as.character(inFile$datapath), data.table=T))}
          #i <- data2[["l"]]()
          #i[[inFile$name]] <-data.table::fread(as.character(inFile$datapath), data.table=T)
          #data2[["l"]](i)
          #i <- li()
          #if (!(inFile$name %in% names(i))){
          #i[[inFile$name]] <- data.table::fread(as.character(inFile$datapath), data.table=T)
          #li(i)}

          }
        })
----------------------------------------------------------------------------
sele <- shiny::reactiveVal("")
      shiny::observeEvent(input$select_cols_som, {
        sele( input$select_cols_som - names(data()) )
      })
      cols <- shiny::reactive(input$select_cols_som - names(data()))
      cols2 <- shiny::reactive(names(data2()))

      sel <- shiny::reactive({
        #shiny::req(input$select_cols_som)
        print(names(data()))
        print(input$select_cols_som)
        dplyr::instersect(x = names(data()), y = input$select_cols_som)
      })


      selected <- shiny::reactive({
        each_var <- purrr::map(cols(), ~ filter_var(data()[[.x]], input[[.x]]))
        purrr::reduce(each_var, `&`)
      })
      selected2 <- shiny::reactive({
        each_var <- purrr::map(cols(), ~ filter_var(data2()[[.x]], input[[.x]]))
        purrr::reduce(each_var, `&`)
      })



      shiny::wellPanel(
            shiny::checkboxGroupInput(
              inputId = "select_cols_som",
              label = "seleziona le colonne: ",
              choiceNames = "",
              choiceValues = "",
              selected = ""
            )),
            -----------------------------------------------------



      shiny::observeEvent(filteredData(), {
        # this is how an example of how you update it
        av <- filteredData()
        DT::replaceData(table_proxy, as.data.frame(av), resetPaging = F)})

      table_proxy <- DT::dataTableProxy("table", session = session)

      shiny::observeEvent(filteredData(), {
          d <- filteredData()
          DT::replaceData(table_proxy,as.data.frame(d), resetPaging = FALSE)
        })

-----------------------------------------------------------------------
 sel <- shiny::reactive({
    d <- data1()
    if (length(selected()) != 0){
      each_var <- purrr::map(names(selected()), ~ filter_var(d[[.x]], selected()[[.x]]))
      purrr::reduce(each_var, `&`)
      d <- data1() %>% dplyr::filter(each_var[[1]])
      i = 1
      while(i < length(names(selected()))){
        i = i + 1
        each_var <- purrr::map(names(selected()), ~ filter_var(d[[.x]], selected()[[.x]]))
        purrr::reduce(each_var, `&`)
        d <- d %>% dplyr::filter(each_var[[i]])
      }
      return(d)
    }
    return(d)
  })

----------------------------------------------------------------------------
 x<-x1
  if (any(is.na(x1)) && is.numeric(x)){
    print("ciao")
    x <- as.character(x1)
  }
  print(typeof(x))
x<-x1
  if (anyNA(x) && is.numeric(x)){
    x <- as.character(x1)
    x <- lapply(x, function(y) {ifelse(is.na(y), "NA", y)})
  }
-----------------------------------
else if (is.character(d[[n2]])){
          lev <- levels(factor(d[[n2]], exclude = NULL))
          #lev <- intersect(lev,selected()[[n2]] )
          shinyWidgets::updatePickerInput(inputId=n2,session=session,selected = selected()[[n2]])


        }
if (is.numeric(d[[n2]])){
          rng <- range(d[[n2]], na.rm = T)
          #if (selected()[[n2]][1]>rng[1]){rng[1]<-selected()[[n2]][1]}
          #if (selected()[[n2]][2]<rng[2]){rng[2]<-selected()[[n2]][2]}
          shiny::updateSliderInput(inputId=n2, value = rng)
        }
---------------------------------------------------

          if (nrow(sel3()) > nrow(s2))
          {sel3(dplyr::right_join(sel3(),s2))}
          else if (nrow(sel3()) < nrow(s2)){
            #print(nrow(dplyr::full_join(s2,sel3())))
            sel3(dplyr::anti_join(s2,sel3()))}
        }
shiny::observeEvent(!is.null(input[["V1"]]),{
    print("a")
    makeo()})
 if (!is.null(d))){
     output$filter <- shiny::renderUI(


         shiny::wellPanel(
           purrr::map(names(d), ~ make_ui(d[[.x]], .x)))
     )
-------------------------------------------------------------
if (all(f)){
              print(x %in% names(filter_vars$l))
              if (x %in% names(filter_vars$l)){filter_vars$l[[x]] <- f}
              }
            else if (!all(f)){

              filter_vars$l[[x]] <- f}Ã¹

observeEvent(!is.null(input$sync),{
  if(!is.null(data1())){


    res <- lapply(names(data1()), function (x) {
      if (!is.null(input[[x]]))
      {
        shiny::observeEvent(input[[x]],{
          if(!is.null(input[[x]]) && !is.null(data1())){
            f <- filter_var(data1()[[x]], input[[x]])
            if (all(f)){
              print(x %in% names(filter_vars$l))
              if (x %in% names(filter_vars$l)){filter_vars$l[[x]] <- f}
            }
            else if (!all(f)){

              filter_vars$l[[x]] <- f}

          }})}
    })

    res}

})
!is.null(vn()) && !is.null(input[[vn()]]
___________________________________________________________________________
#shiny::req(identical(union(names(proc_data1()),input$checkbox1), names(proc_data1())) && !is.null(input$checkbox1))
#final_data1()[,input$checkbox1, drop = FALSE],
  #FILTERED SOMATIC DATA TO RENDER
  final_data1 <- reactive({
    shiny::req(proc_data1())
    shiny::req(filter_vars$l)
    d <- proc_data1()
    if (length(filter_vars$l) != 0){
        d <- d %>% dplyr::filter(purrr::reduce(filter_vars$l,`&`))
    }
    d
  })

  #FILTERED GERM DATA TO RENDER
  final_data2 <- reactive({
    shiny::req(proc_data2())
    shiny::req(filter_vars2$l)
    d <- proc_data2()
    if (length(filter_vars2$l) != 0){
      d <- d %>% dplyr::filter(purrr::reduce(filter_vars2$l,`&`))
    }
    d
  })
  _________________________________________________________________________
  for(n in names(proc_data1())){
          make_ui(proc_data1()[[n]], n)}

          if(is.character(proc_data1()[[n]])){
            sel1$l[[n]] <- levels(factor(proc_data1()[[n]], exclude = NULL))
            #shiny::updateSelectizeInput(inputId = n,choices = sel1$l[[n]], selected =  sel1$l[[n]])
        }}
        for(n in names(proc_data1())){if(is.character(proc_data1()[[n]])){
      sel1$l[[n]] <- levels(factor(proc_data1()[[n]], exclude = NULL))

      #shiny::updateSelectizeInput(inputId = n,choices = lev, selected =  lev)
    }}


    shiny::observeEvent(length(sel1$l) > 0,{
  if (length(sel1$l) > 0){
    for (n in names(sel1$l)){
      shiny::updateSelectizeInput(inputId = n,choices = sel1$l[[n]], selected =  sel1$l[[n]], server = F)
    }
  }
})

  #DYNAMICALLY CREATE OBSERVERS FOR SOMATIC FILTERS' INPUTS
  shiny::observeEvent(sel1() ,{
    if(!is.null(proc_data1())){
      #create observers fo inputs
      res <- lapply(names(proc_data1()), function (x) {
          shiny::observeEvent(input[[x]], {
            #questionable if, check for redundant initialization of observers
            if(!is.null(input[[x]]) && !is.null(proc_data1())){
              f <- filter_var(proc_data1()[[x]], input[[x]])
              if (all(f)){
                if (x %in% names(filter_vars1$l)){
                  filter_vars1$l[[x]] <- f
                }
              }
              else if (!all(f)){
                filter_vars1$l[[x]] <- f
              }
            }
          },ignoreInit = T ) #inner observer end
      }) #lapply end
      obs1(res)
    }
  },ignoreInit = T) #end outer observer
  ------------------------------------------------------------------------------
  make_ui1 <- function(x, var) {
  if (is.numeric(x)) {
    rng <- range(x, na.rm = T)
    shiny::sliderInput(var, var, min = rng[1], max = rng[2], value = rng)
  } else if (is.factor(x)) {
    levs <- levels(factor(x, exclude = NULL))
    shinyWidgets::pickerInput(var, var, choices = levs, selected = levs, multiple = TRUE, options = shinyWidgets::pickerOptions(actionsBox= TRUE, size = 10),choicesOpt = list(content = stringr::str_trunc(c(levs), width = 40)) )
  }
  else if ( is.array(x) || is.character(x)) {
    #NULL
    levs <- levels(factor(x, exclude = NULL))
    #per un select normalepuoi fare il truncate e fare un vettore con c(nomi,valori) per le select
    shiny::selectizeInput(var, var, choices = levs, selected = levs, multiple = TRUE,size=10)
    #shinyWidgets::pickerInput(var, var, choices = levs, selected = levs, multiple = TRUE, options = shinyWidgets::pickerOptions(actionsBox= TRUE, size = 10, virtualScroll= TRUE ),choicesOpt = list(content = stringr::str_trunc(c(levs), width = 40)) )
    #shiny::selectInput(var, var, choices = levs, selected = levs, multiple = TRUE, selectize = T)
  }
  else if (is.logical(x)) {
    if(all(is.na(x)) || all(is.null(x))) {NULL}
    else
    {levs <- levels(factor(x, exclude = NULL))
    shinyWidgets::pickerInput(var, var, choices = levs, selected = levs, multiple = TRUE, options = shinyWidgets::pickerOptions(actionsBox= TRUE, size = 10),choicesOpt = list(content = stringr::str_trunc(c(levs), width = 40))) }
  }

  else {
    # Not supported
    NULL
  }
}




    fv1 <- filter_vars1$l
    if (length(filter_vars1$l) != 0 && !identical(length(filter_vars1$l[[1]]),nrow(proc_data1()))){fv1 <- list()}
    chk1 <- input$checkbox1
    if (!identical(union(names(proc_data1()),input$checkbox1), names(proc_data1()))){ chk1 <- c()}
______________________________________________________________________________________________________________________________________________________
    #fv1 <- filter_vars1$l
    #if (length(filter_vars1$l) != 0 && !identical(length(filter_vars1$l[[1]]),nrow(proc_data1()))){fv1 <- list()}
    #chk1 <- input$checkbox1
    #if (!identical(union(names(proc_data1()),input$checkbox1), names(proc_data1()))){ chk1 <- c()}

         output$som_table <- DT::renderDataTable({
        shiny::req(proc_data1())
        DT::datatable(
          proc_data1(),
          extensions = 'Buttons',
          rownames = FALSE,
          filter = 'top',
          selection = list(mode = "multiple"),
          editable = F,
          class = 'stripe hover order-column',
          #class = 'cell-border',
          options = list(
            serverSide = TRUE,
            paging = TRUE,
            processing = TRUE,
            autoWidth = T,
            fixedHeader = T,
            #### CONTROLLA BENE LE OPTIONS IL BOTTLENECK Ã¨ QUI  ####
            # QUESTA Ã¨ LA TABELLA PER I TEST
            columnDefs = list(list(className = 'dt-center', width = "auto",
                                   render = DT::JS(
                                     "function(data, type, row, meta) {",
                                     "return type === 'display' && data != null && data.length > 30 ?",
                                     "'<span title=\"' + data + '\">' + data.substr(0, 30) + '...</span>' : data;",
                                     "}"), targets = "_all")),
            #columnDefs = list(list(width = 'auto', targets = "_all")),
            #callback = DT::JS('table.draw(true);'),
            pageLength = 50,
            pagingType = 'full_numbers',
            scrollX = T,
            scrollCollapse = F,
            dom = 'Blfrtip',
            buttons = c('copy', 'excel', 'pdf'),
            lengthMenu = list(c(10,25,50,100,1000,-1),c(10,25,50,100,1000,"All"))
          )
        )
      },server = T)

            #columnDefs = list(list(targets = '_all', width="250px")),
            #### CONTROLLA BENE LE OPTIONS IL BOTTLENECK Ã¨ QUI  ####
            # QUESTA Ã¨ LA TABELLA PER I TEST
        #    columnDefs = list(
         #     list(className = 'dt-center',
         #          width = "auto",
          #         render = DT::JS("function(data, type, row, meta) {",
          #                         "return type === 'display' && data != null && data.length > 30 ?",
          #                         "'<span title=\"' + data + '\">' + data.substr(0, 30) + '...</span>' : data;}"),
          #         targets = "_all")
                    #,list(visible=F,targets = 2)
          #  ),
      output$germ_table <- DT::renderDataTable({
        shiny::req(proc_data2())
        DT::datatable(
          proc_data2(),
          extensions = c('Buttons','FixedHeader'),
          rownames = FALSE,
          filter = 'top',
          #fillContainer = T,
          container = htmltools::withTags(table(DT::tableHeader(names(proc_data2())),DT::tableFooter(names(proc_data2())))),
          selection = list(mode = "multiple"),
          editable = FALSE,
          class = 'display',
          options = list(
            order = list(0,"asc"),
            serverSide = TRUE,
            paging = F,
            processing = TRUE,
            autoWidth = F,
            fixedHeader = list(header = F, footer = T),
            #pageLength = 25,
            #pagingType = 'full_numbers',
            #scrollY = 944,
            #scrollX = T,
            scrollCollapse = T,
            dom = 'Blf<"row_i" pi>rtip',
            buttons = list('copy', 'excel','colvis','colvisRestore',
                           list(extend = "pdf", pageSize = "A3", orientation = "landscape", exportOptions = list(columns = ":visible"))
            )
            #,lengthMenu = list(c(10,25,50,100,1000,-1),c(10,25,50,100,1000,"All"))
          )
        )
        #%>% DT::formatStyle(names(proc_data1()),"text-align"= "center", 'min-width' = '250px','width' = '250px','max-width' = '250px')
      },
      server = T
      )

______________________________________________________________________________________________________________________________________________________________________________________

QUESTA Ã¨ LA ROW CALL BACK
rowCallback = JS(
    "function(row, data) {",
    "var num = '$' + data[3].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');",
    "$('td:eq(3)', row).html(num);",
    "}")



Gene <- c("SYMBOL","Symbol","symbol","hugo_symbol" ,"Hugo_Symbol","HUGO_SYMBOL","Gene.refGene","Gene","gene")
Chromosome <- c("CHROM", "Chromosome","Chr","chrom","chromosome")
Ref <- c("Ref","REF","Tumor_Seq_Allele1",)
Alt <- c("Alt","ALT","Tumor_Seq_Allele2","alt")
VAF <- c("vaf","VAF","Vaf")
Consequence <- c("Consequence","Variant_Classification","Func.refGene","consequence")
VARIANT_CLASS <- c("VARIANT_CLASS","Variant_Type","ExonicFunc.refGene","variant_class")
Clinvar <- c("CLIN_SIG","clinvar","Clinvar",)
Start <- c("Start_Position","start","Start",)
End <- c("End_Position","end","End",)
Variation <- c("Existing_variation","AAChange.refGene","Variation","Var","variation")
HGVSp <- c("HGVSp_Short","HGVSp","hgvsp")
Exon <- c("Exon_Number","EXON","exon","Exon")
VARIE <- c("Actionable.O","Actionable.M","Actionable.C","Moderate.risk","azionabile","depth","High.risk","actionable","Amino_acids","Protein_position","cancervar_tier","tiering","POS","pos")


c("Actionable.O","Actionable.M","Actionable.C","Moderate.risk","azionabile","depth","High.risk","actionable","Amino_acids","Protein_position","cancervar_tier","tiering","POS","pos","SYMBOL","Symbol","symbol","hugo_symbol" ,"Hugo_Symbol","HUGO_SYMBOL","Gene.refGene","Gene","gene","CHROM", "Chromosome","Chr","chrom","chromosome","Ref","REF","Tumor_Seq_Allele1","Alt","ALT","Tumor_Seq_Allele2","alt","vaf","VAF","Vaf","Consequence","Variant_Classification","Func.refGene","consequence","VARIANT_CLASS","Variant_Type","ExonicFunc.refGene","variant_class","CLIN_SIG","clinvar","Clinvar","Start_Position","start","Start","End_Position","end","End","Existing_variation","AAChange.refGene","Variation","Var","variation","HGVSp_Short","HGVSp","hgvsp","Exon_Number","EXON","exon","Exon")


<span class="arrow down" style="
    border: solid #808080;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 6px;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
"></span>

display: flex; */
    flex-direction: row;
    overflow: auto;
    position: sticky;
    z-index: 1000000;
    top: 58vw;
    /* max-height: 75vw; */
    width: 100%;
    max-width: 75vw;
    text-align: right;
    justify-content: space-between;

    margin-left: 0;
    padding-left: 10px;
    float: left;
    left: 25%;
    width: 3000px;
    position: sticky !important;

        /* display: flex; */
    flex-direction: row;
    overflow: auto;
    position: fixed;
    /* bottom: -99%; */
    bottom: 37px;
    max-height: 600px;
    z-index: 1000;
    /* top: 30%; */
    /* max-height: 75vw; */
    width: 100%;
    max-width: 75vw;
    text-align: right;
    justify-content: space-between;
    .row_b {
    /* display: flex; */
    flex-direction: row;
    overflow: auto;
    position: sticky;
    /* bottom: -99%; */
    /* bottom: 37px; */
    /* max-height: 600px; */
    z-index: 1000;
    top: 89%;
    /* max-height: 75vw; */
    width: 100%;
    max-width: 75vw;
    text-align: right;
    justify-content: space-between;
}
buttons

{margin-left: 0;
    padding-left: 10px;
    float: left;
    left: 25%;
    width: 2000px;
    position: sticky !important;}


    max-width: 100vw;
    position: sticky;
    display: flex;
    height: 140px;
    z-index: 10001;
    display: flex;
    /* position: absolute; */
    overflow: hidden;
    bottom: 0;
    width: 100%;
    box-shadow: 0 6px 5px -7px grey inset;
    height: 126px;
    left: 0;
    background-color: #FFFFFF;
    text-align: center;
    align-items: center;
    left: 0;
    justify-content: space-between;
shinyjs::onclick( id = "toggleSidebar", {
    shinyjs::runjs(
      'var x = document.querySelector("#nav_cont_2 > nav > div > div");
      var y = document.querySelector("#nav_cont_2 > nav > div > div.navbar-collapse.collapse");
      var b1 = document.querySelector("#GSP-som_table > div > div.row_b > div.dt-buttons");
      var b2 = document.querySelector("#GSP-germ_table > div > div.row_b > div.dt-buttons");
      var p1 = document.querySelector("#GSP-som_table > div > div.row_i > div.dataTables_length");
      var p2= document.querySelector("#GSP-germ_table >  div > div.row_i > div.dataTables_length");
      var i1 = document.querySelectorAll("#GSP-som_table > div > div.row_i > div.dataTables_info");
      var i2= document.querySelectorAll("#GSP-germ_table > div > div.row_i > div.dataTables_info");

      if (x.style.width == "93px") {
        if (b1 != null){
          b1.style.left = "25%";
          p1.style.left = "25%";
          i1[0].style.left = "25%";
          i1[1].style.left = "25%";
        }
        if (b2 != null){
          b2.style.left = "25%";
          p2.style.left = "25%";
          i2[0].style.left = "25%";
          i2[1].style.left = "25%";
        }

          x.style.width="24.5%";
          y.style.left="24.5%";

      }
      else {
      if (b1 != null){
        b1.style.left = "0";
        p1.style.left = "0";
        i1[0].style.left = "0";
          i1[1].style.left = "0";
      }
      if (b2 != null){
        b2.style.left = "0";
        p2.style.left = "0";
        i2[0].style.left = "0";
          i2[1].style.left = "0";
      }

      y.style.left="0";
      x.style.width="93px";

      }'
    )
    shinyjs::toggle(
      id = "sidebar",
      anim = TRUE,
      animType = "fade",
      time = 0.1
    )
  })
    shinyjs::onevent( event = "mousemove", id = "nav_cont_2", {
    shinyjs::runjs(
      'var x = document.querySelector("#GSP-som_table > div > div.dataTables_scroll > div.dataTables_scrollBody > table");
       var y = document.querySelector("#GSP-som_table > div > div.dataTables_scroll > div.dataTables_scrollBody");
      if (y != null && x != null){
       if (y.style.maxHeight != x.offsetHeight + 20){y.style.maxHeight = x.offsetHeight + 20 + "px";}}'
    )
  })
